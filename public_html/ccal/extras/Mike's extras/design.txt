    The crux of the Crimson Calendars project lies in merging
the two API’s, Google Calendar and CS50 Events, into one 
usable format. There are 4 main pages which gives the 
website its functionality: index.php, events.html, 
calendars.html, and events.php. There is also a respository 
of source code provided by Google that is necessary in 
order to verify the site’s requests to the Google server. 
In this document, the design features of each of the four 
pages shall be discussed independently. 


    The first of these pages is index.php or the home page. 
Index.php is initially concerned with authorizing the site 
to access a user’s Google Calendar information. I decided 
to code this page in PHP as a user’s one week calendar 
display need not be dynamic to function. After authorizing 
with the Google server index.php requests all of the 
information from a user’s primary Google calendar.  Upon 
retrieving this information various values about each 
event are stored in multiple arrays that use the same 
system of indexing so that the site will then be able to 
search through those arrays. The following lines of html 
and php are responsible for displaying some of the less 
particular, non-event related parts of code. For example, 
the chart headers, links to the other site pages, and the 
current date. Then in order to print out events as need 
each individual row is printed, with the timestamp and 
events being determined for each cell in that row. Cell 
by cell the lines of PHP code determine the unix timestamp 
of 00:00:00 on Monday morning and then slowly add time in 
hour and day increments to that value. Following this 
determination of a cell’s timestamp the site checks for 
recurrence, or for matching unix timestamps for single 
events. In additional to checking for recurrence the code 
checks to ensure that the weekday is in the recurrence 
frequency rules and that the hourly start time matches 
the hour of that cell. The user not only has the capacity 
to view this week, but also be the 'next week' and 
'previous week' link a user can dynamically view their calendar
. This was acheived by altering the unix timestamp of the 
monday variable by one week, positive and negative accordingly.
The 'this week' link simply sends 0 for week offset back to
index.php. Thus by altering the unix timestamp we can allow users
to view far more information.  


    Events.html is a far simpler page, using Ajax to allow 
users to view events from any given day inside of the 
current month and then add those vents, given that they 
are in the future, to their Calendar. The fact that one 
can only add future events to their calendar does not seem 
like a design flaw to me in that it does not fall under 
the necessary scope of the functionality of the Crimson 
Calendars site. By clicking ‘Next’ or ‘Previous’ the user 
is altering the $day variable which tracks the offset 
from the current day. The date for that day is then 
displayed along with that day’s actual events. Upon 
arriving at this page the $days variable is set to 0 and 
incremented whenever either button is pressed. 
Additionally by using AJAX and dynamically constructing 
the URL to send requests to the page is able to bring up 
the specified day’s events. An important component of 
this is that the ajax call also handles wiping the old 
data so that the new events may be displayed correctly. 
It also handles displaying the correct add feature for 
each event by creating a dynamic GET request to 
events.php for each events. 


    The next file to discuss is events.php, which is the 
code for actually adding events to a user’s Google 
Calendar.  This code uses the quick-add feature of the 
Google Calendar API, so a string has to be prepared from 
the values passed events.php via the get request sent by 
events.html. Upon preparing this string the code simply 
makes the necessary call to the user’s primary calendar 
and since index.php is included in event.php the token 
information regarding authentication is still present. 
Since the redirect URL provided to Google initially was 
for the index page the call redirects to that page, but 
the event is not yet displayed. By clicking the ‘add 
selected event’ link a user causes the event to display. 
This is because the call is sent from the page to which 
the user is initially sent and thus by refreshing the 
user would send the same request again, which would cause
a duplicate event. 

    The final file is calendars.html, which is used simply to 
display the Calendars available to the user on the site. 
By making an ajax call to the cs50 Events API the site 
retrieves the College Calendars that are on the site.  
After the call the additional code is responsible for 
evaluating the ajax response and displaying it in the 
specified html <div>. The nature of the code on this page 
is almost identical to that of events.html, but without 
the same dynamic attributes. 

    Overall the design of this site mostly has to do with 
ensuring the functionality of the two API’s, and merging 
their outputs with the required input forms. Naturally, 
there is a significant amount of date handling as well as 
string management.  Fortunately that code works well so 
the functionality of the site is complete in concept if 
not fully user friendly yet in terms of css, but that 
was not an explicit goal of this project. Crimson Calendars now 
provides a practical and useful service in a simple format. 

